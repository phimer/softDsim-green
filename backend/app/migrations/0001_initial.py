# Generated by Django 4.0.5 on 2022-06-14 10:52

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Action",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("title", models.TextField()),
                ("lower_limit", models.IntegerField(blank=True, null=True)),
                ("upper_limit", models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.TextField(default="answer")),
                ("points", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="ManagementGoal",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("budget", models.FloatField()),
                ("duration", models.PositiveIntegerField()),
                ("easy_tasks", models.PositiveIntegerField()),
                ("medium_tasks", models.PositiveIntegerField()),
                ("hard_tasks", models.PositiveIntegerField()),
                (
                    "tasks_predecessor_p",
                    models.FloatField(
                        default=0.1,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "xp",
                    models.FloatField(
                        default=0.0,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "motivation",
                    models.FloatField(
                        default=0.75,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("familiar_tasks", models.PositiveIntegerField(default=0)),
                (
                    "familiarity",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "stress",
                    models.FloatField(
                        default=0.1,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModelSelection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("index", models.PositiveIntegerField()),
                ("waterfall", models.BooleanField(default=True)),
                ("kanban", models.BooleanField(default=True)),
                ("scrum", models.BooleanField(default=True)),
                ("text", models.TextField(blank=True, default="", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("text", models.TextField()),
                ("question_index", models.PositiveIntegerField()),
                ("multi", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="QuestionCollection",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("index", models.PositiveIntegerField()),
                ("text", models.TextField(blank=True, default="", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ScenarioConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32, unique=True)),
                ("stress_error_optimum", models.FloatField(default=0.2)),
                ("stress_weekend_reduction", models.FloatField(default=-0.15)),
                ("stress_overtime_increase", models.FloatField(default=0.05)),
                ("stress_error_increase", models.FloatField(default=0.02)),
                ("task_completion_coefficient", models.FloatField(default=1.0)),
                ("error_completion_coefficient", models.FloatField(default=1.5)),
                ("done_tasks_per_meeting", models.IntegerField(default=50)),
                ("done_tasks_familiarity_factor", models.FloatField(default=10)),
                ("train_skill_increase_rate", models.FloatField(default=0.1)),
                ("cost_member_team_event", models.FloatField(default=500.0)),
            ],
        ),
        migrations.CreateModel(
            name="ScenarioState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("component_counter", models.IntegerField(default=0)),
                ("step_counter", models.IntegerField(default=0)),
                ("cost", models.FloatField(default=0)),
                ("day", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="ScoreCard",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("budget_limit", models.PositiveIntegerField(default=100)),
                ("time_limit", models.PositiveIntegerField(default=100)),
                ("quality_limit", models.PositiveIntegerField(default=100)),
                ("budget_p", models.FloatField(default=1.0)),
                ("time_p", models.FloatField(default=1.0)),
                ("quality_k", models.FloatField(default=1.0)),
            ],
        ),
        migrations.CreateModel(
            name="SimulationEnd",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("limit", models.FloatField()),
                ("type", models.TextField(max_length=16)),
                ("limit_type", models.TextField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name="SimulationFragment",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("index", models.PositiveIntegerField()),
                ("text", models.TextField()),
                ("last", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="SkillType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32, unique=True)),
                (
                    "cost_per_day",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)]
                    ),
                ),
                (
                    "error_rate",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "throughput",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("difficulty", models.PositiveIntegerField()),
                ("done", models.BooleanField(default=False)),
                ("bug", models.BooleanField(default=False)),
                ("correct_specification", models.BooleanField(default=True)),
                ("unit_tested", models.BooleanField(default=False)),
                ("integration_tested", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="team", max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name="TemplateScenario",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(default="default_scenario_name")),
                ("story", models.TextField(blank=True, default="", max_length=65536)),
            ],
        ),
        migrations.CreateModel(
            name="UserScenario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model", models.CharField(blank=True, max_length=16, null=True)),
                (
                    "config",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="app.scenarioconfig",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="app.templatescenario",
                    ),
                ),
            ],
        ),
    ]
